@html.extend('layout', function(model){

    @html.block("body", function(model){

        <h1 style="margin-bottom:50px">
            @model.title
        </h1>

<div class="row" style="border-bottom: 2px solid #cccccc;">

<div class="col-sm-6">

<h2>User Functions</h2>

<h3>Get Users</h3>
<h4>http://localhost:8000/api/users</h4>

<h3>Get User</h3>
<h4>http://localhost:8000/api/users/{user_id}</h4>

<h3>Create User</h3>
<h4>http://localhost:8000/api/users</h4>
<p>
{
	"username": "efourie",
	"first_name": "Etresea",
	"last_name": "Fourie"
}
</p>

<h3>Update User</h3>
<h4>http://localhost:8000/api/users/{user_id}</h4>
<p>
{
	"username": "sfourie",
	"first_name": "Sarie",
	"last_name": "Fourie"
}
</p>

<h3>Delete User</h3>
<h4>http://localhost:8000/api/users/{user_id}</h4>

</div>

<div class="col-sm-6">


<h2>User Task Functions</h2>

<h3>Get User Tasks</h3>
<h4>http://localhost:8000/api/users/{user_id}/tasks</h4>

<h3>Get User Task</h3>
<h4>http://localhost:8000/api/users/{user_id}/tasks/{task_id}</h4>

<h3>Create User Task</h3>
<h4>http://localhost:8000/api/users/{user_id}/tasks</h4>
<p>
{
	"name": "Task 3",
	"description":"Task 3 Description"
}
</p>

<h3>Update User Task</h3>
<h4>http://localhost:8000/api/users/{user_id}/tasks/{task_Id}</h4>
<p>
{
	"name": "Task 4",
	"description":"Task 4 Description"
}
</p>

<h3>Delete User Task</h3>
<h4>http://localhost:8000/api/users/{user_id}/tasks/{task_Id}</h4>

</div>

</div>

<div class="row" style="border-bottom: 2px solid #cccccc;">

<div class="col-sm-6">
<h2>Task Update Schedule</h2>

<p>A task update schedule has been setup to run every minute and update records with status: pending. </p>
<p>The next_execute_date_time has been set to 5 minutes after task creation.</p> 
<p>
With the limited experience I have in mongodb I could not figure out how to 
select multiple sub-documents in time(guessing it has to do with aggregation...), to bring as little back from the database 
as possible. I have setup code in the task scheduler to check for next_execute_date_time and pending status codes.
</p>
</div>

<div class="col-sm-6">
<h2>MongoDb</h2>

<p>I have setup the project to read and write to a mongodb database</p>
<p>When running the project with the gulp command mock data will seed the database with test USERS and TASKS</p> 
</div>

</div>

<div class="row" style="border-bottom: 2px solid #cccccc;">

<div class="col-sm-6">
<h2>Comments</h2>

<p>I just want to thank you for this opportunity. I really had a lot of fun creating an API project with node.js and using Mongodb.</p>
</div>

</div>



































    })
})
